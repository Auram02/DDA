//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DDA.Report_Datasources {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("rptFCR")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class rptFCR : System.Data.DataSet {
        
        private MainDistributorDataTable tableMainDistributor;
        
        private BranchesDataTable tableBranches;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rptFCR() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected rptFCR(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MainDistributor"] != null)) {
                    base.Tables.Add(new MainDistributorDataTable(ds.Tables["MainDistributor"]));
                }
                if ((ds.Tables["Branches"] != null)) {
                    base.Tables.Add(new BranchesDataTable(ds.Tables["Branches"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MainDistributorDataTable MainDistributor {
            get {
                return this.tableMainDistributor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BranchesDataTable Branches {
            get {
                return this.tableBranches;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            rptFCR cln = ((rptFCR)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MainDistributor"] != null)) {
                    base.Tables.Add(new MainDistributorDataTable(ds.Tables["MainDistributor"]));
                }
                if ((ds.Tables["Branches"] != null)) {
                    base.Tables.Add(new BranchesDataTable(ds.Tables["Branches"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMainDistributor = ((MainDistributorDataTable)(base.Tables["MainDistributor"]));
            if ((initTable == true)) {
                if ((this.tableMainDistributor != null)) {
                    this.tableMainDistributor.InitVars();
                }
            }
            this.tableBranches = ((BranchesDataTable)(base.Tables["Branches"]));
            if ((initTable == true)) {
                if ((this.tableBranches != null)) {
                    this.tableBranches.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "rptFCR";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/rptFCR.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMainDistributor = new MainDistributorDataTable();
            base.Tables.Add(this.tableMainDistributor);
            this.tableBranches = new BranchesDataTable();
            base.Tables.Add(this.tableBranches);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMainDistributor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBranches() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            rptFCR ds = new rptFCR();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MainDistributorRowChangeEventHandler(object sender, MainDistributorRowChangeEvent e);
        
        public delegate void BranchesRowChangeEventHandler(object sender, BranchesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MainDistributorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTerritoryManager;
            
            private System.Data.DataColumn columnRegionalManager;
            
            private System.Data.DataColumn columnNode;
            
            private System.Data.DataColumn columnSAP;
            
            private System.Data.DataColumn columnDistributorName;
            
            private System.Data.DataColumn columnBillingAddress;
            
            private System.Data.DataColumn columnShippingAddress;
            
            private System.Data.DataColumn columnTelephone;
            
            private System.Data.DataColumn columnTelefax;
            
            private System.Data.DataColumn columnContactNames;
            
            private System.Data.DataColumn columnContactTitles;
            
            private System.Data.DataColumn columnContractNumber;
            
            private System.Data.DataColumn columnCategories;
            
            private System.Data.DataColumn columnTerritory;
            
            private System.Data.DataColumn columnContractDate;
            
            private System.Data.DataColumn columnModifiedDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MainDistributorDataTable() {
                this.TableName = "MainDistributor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MainDistributorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MainDistributorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerritoryManagerColumn {
                get {
                    return this.columnTerritoryManager;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegionalManagerColumn {
                get {
                    return this.columnRegionalManager;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NodeColumn {
                get {
                    return this.columnNode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SAPColumn {
                get {
                    return this.columnSAP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistributorNameColumn {
                get {
                    return this.columnDistributorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BillingAddressColumn {
                get {
                    return this.columnBillingAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShippingAddressColumn {
                get {
                    return this.columnShippingAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelephoneColumn {
                get {
                    return this.columnTelephone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelefaxColumn {
                get {
                    return this.columnTelefax;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContactNamesColumn {
                get {
                    return this.columnContactNames;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContactTitlesColumn {
                get {
                    return this.columnContactTitles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractNumberColumn {
                get {
                    return this.columnContractNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CategoriesColumn {
                get {
                    return this.columnCategories;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerritoryColumn {
                get {
                    return this.columnTerritory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractDateColumn {
                get {
                    return this.columnContractDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModifiedDateColumn {
                get {
                    return this.columnModifiedDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MainDistributorRow this[int index] {
                get {
                    return ((MainDistributorRow)(this.Rows[index]));
                }
            }
            
            public event MainDistributorRowChangeEventHandler MainDistributorRowChanging;
            
            public event MainDistributorRowChangeEventHandler MainDistributorRowChanged;
            
            public event MainDistributorRowChangeEventHandler MainDistributorRowDeleting;
            
            public event MainDistributorRowChangeEventHandler MainDistributorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMainDistributorRow(MainDistributorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MainDistributorRow AddMainDistributorRow(
                        string TerritoryManager, 
                        string RegionalManager, 
                        string Node, 
                        string SAP, 
                        string DistributorName, 
                        string BillingAddress, 
                        string ShippingAddress, 
                        string Telephone, 
                        string Telefax, 
                        string ContactNames, 
                        string ContactTitles, 
                        string ContractNumber, 
                        string Categories, 
                        string Territory, 
                        string ContractDate, 
                        string ModifiedDate) {
                MainDistributorRow rowMainDistributorRow = ((MainDistributorRow)(this.NewRow()));
                rowMainDistributorRow.ItemArray = new object[] {
                        TerritoryManager,
                        RegionalManager,
                        Node,
                        SAP,
                        DistributorName,
                        BillingAddress,
                        ShippingAddress,
                        Telephone,
                        Telefax,
                        ContactNames,
                        ContactTitles,
                        ContractNumber,
                        Categories,
                        Territory,
                        ContractDate,
                        ModifiedDate};
                this.Rows.Add(rowMainDistributorRow);
                return rowMainDistributorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MainDistributorDataTable cln = ((MainDistributorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MainDistributorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTerritoryManager = base.Columns["TerritoryManager"];
                this.columnRegionalManager = base.Columns["RegionalManager"];
                this.columnNode = base.Columns["Node"];
                this.columnSAP = base.Columns["SAP"];
                this.columnDistributorName = base.Columns["DistributorName"];
                this.columnBillingAddress = base.Columns["BillingAddress"];
                this.columnShippingAddress = base.Columns["ShippingAddress"];
                this.columnTelephone = base.Columns["Telephone"];
                this.columnTelefax = base.Columns["Telefax"];
                this.columnContactNames = base.Columns["ContactNames"];
                this.columnContactTitles = base.Columns["ContactTitles"];
                this.columnContractNumber = base.Columns["ContractNumber"];
                this.columnCategories = base.Columns["Categories"];
                this.columnTerritory = base.Columns["Territory"];
                this.columnContractDate = base.Columns["ContractDate"];
                this.columnModifiedDate = base.Columns["ModifiedDate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTerritoryManager = new System.Data.DataColumn("TerritoryManager", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerritoryManager);
                this.columnRegionalManager = new System.Data.DataColumn("RegionalManager", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionalManager);
                this.columnNode = new System.Data.DataColumn("Node", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNode);
                this.columnSAP = new System.Data.DataColumn("SAP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAP);
                this.columnDistributorName = new System.Data.DataColumn("DistributorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorName);
                this.columnBillingAddress = new System.Data.DataColumn("BillingAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillingAddress);
                this.columnShippingAddress = new System.Data.DataColumn("ShippingAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingAddress);
                this.columnTelephone = new System.Data.DataColumn("Telephone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephone);
                this.columnTelefax = new System.Data.DataColumn("Telefax", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelefax);
                this.columnContactNames = new System.Data.DataColumn("ContactNames", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactNames);
                this.columnContactTitles = new System.Data.DataColumn("ContactTitles", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactTitles);
                this.columnContractNumber = new System.Data.DataColumn("ContractNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractNumber);
                this.columnCategories = new System.Data.DataColumn("Categories", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategories);
                this.columnTerritory = new System.Data.DataColumn("Territory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerritory);
                this.columnContractDate = new System.Data.DataColumn("ContractDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractDate);
                this.columnModifiedDate = new System.Data.DataColumn("ModifiedDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDate);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MainDistributorRow NewMainDistributorRow() {
                return ((MainDistributorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MainDistributorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MainDistributorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MainDistributorRowChanged != null)) {
                    this.MainDistributorRowChanged(this, new MainDistributorRowChangeEvent(((MainDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MainDistributorRowChanging != null)) {
                    this.MainDistributorRowChanging(this, new MainDistributorRowChangeEvent(((MainDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MainDistributorRowDeleted != null)) {
                    this.MainDistributorRowDeleted(this, new MainDistributorRowChangeEvent(((MainDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MainDistributorRowDeleting != null)) {
                    this.MainDistributorRowDeleting(this, new MainDistributorRowChangeEvent(((MainDistributorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMainDistributorRow(MainDistributorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                rptFCR ds = new rptFCR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MainDistributorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BranchesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTerritoryManager;
            
            private System.Data.DataColumn columnRegionalManager;
            
            private System.Data.DataColumn columnNode;
            
            private System.Data.DataColumn columnSAP;
            
            private System.Data.DataColumn columnDistributorName;
            
            private System.Data.DataColumn columnBillingAddress;
            
            private System.Data.DataColumn columnShippingAddress;
            
            private System.Data.DataColumn columnTelephone;
            
            private System.Data.DataColumn columnTelefax;
            
            private System.Data.DataColumn columnContactNames;
            
            private System.Data.DataColumn columnContactTitles;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchesDataTable() {
                this.TableName = "Branches";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BranchesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BranchesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TerritoryManagerColumn {
                get {
                    return this.columnTerritoryManager;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegionalManagerColumn {
                get {
                    return this.columnRegionalManager;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NodeColumn {
                get {
                    return this.columnNode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SAPColumn {
                get {
                    return this.columnSAP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistributorNameColumn {
                get {
                    return this.columnDistributorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BillingAddressColumn {
                get {
                    return this.columnBillingAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShippingAddressColumn {
                get {
                    return this.columnShippingAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelephoneColumn {
                get {
                    return this.columnTelephone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelefaxColumn {
                get {
                    return this.columnTelefax;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContactNamesColumn {
                get {
                    return this.columnContactNames;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContactTitlesColumn {
                get {
                    return this.columnContactTitles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchesRow this[int index] {
                get {
                    return ((BranchesRow)(this.Rows[index]));
                }
            }
            
            public event BranchesRowChangeEventHandler BranchesRowChanging;
            
            public event BranchesRowChangeEventHandler BranchesRowChanged;
            
            public event BranchesRowChangeEventHandler BranchesRowDeleting;
            
            public event BranchesRowChangeEventHandler BranchesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBranchesRow(BranchesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchesRow AddBranchesRow(string TerritoryManager, string RegionalManager, string Node, string SAP, string DistributorName, string BillingAddress, string ShippingAddress, string Telephone, string Telefax, string ContactNames, string ContactTitles) {
                BranchesRow rowBranchesRow = ((BranchesRow)(this.NewRow()));
                rowBranchesRow.ItemArray = new object[] {
                        TerritoryManager,
                        RegionalManager,
                        Node,
                        SAP,
                        DistributorName,
                        BillingAddress,
                        ShippingAddress,
                        Telephone,
                        Telefax,
                        ContactNames,
                        ContactTitles};
                this.Rows.Add(rowBranchesRow);
                return rowBranchesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BranchesDataTable cln = ((BranchesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BranchesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTerritoryManager = base.Columns["TerritoryManager"];
                this.columnRegionalManager = base.Columns["RegionalManager"];
                this.columnNode = base.Columns["Node"];
                this.columnSAP = base.Columns["SAP"];
                this.columnDistributorName = base.Columns["DistributorName"];
                this.columnBillingAddress = base.Columns["BillingAddress"];
                this.columnShippingAddress = base.Columns["ShippingAddress"];
                this.columnTelephone = base.Columns["Telephone"];
                this.columnTelefax = base.Columns["Telefax"];
                this.columnContactNames = base.Columns["ContactNames"];
                this.columnContactTitles = base.Columns["ContactTitles"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTerritoryManager = new System.Data.DataColumn("TerritoryManager", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerritoryManager);
                this.columnRegionalManager = new System.Data.DataColumn("RegionalManager", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionalManager);
                this.columnNode = new System.Data.DataColumn("Node", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNode);
                this.columnSAP = new System.Data.DataColumn("SAP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAP);
                this.columnDistributorName = new System.Data.DataColumn("DistributorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributorName);
                this.columnBillingAddress = new System.Data.DataColumn("BillingAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillingAddress);
                this.columnShippingAddress = new System.Data.DataColumn("ShippingAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingAddress);
                this.columnTelephone = new System.Data.DataColumn("Telephone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephone);
                this.columnTelefax = new System.Data.DataColumn("Telefax", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelefax);
                this.columnContactNames = new System.Data.DataColumn("ContactNames", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactNames);
                this.columnContactTitles = new System.Data.DataColumn("ContactTitles", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactTitles);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchesRow NewBranchesRow() {
                return ((BranchesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BranchesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BranchesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BranchesRowChanged != null)) {
                    this.BranchesRowChanged(this, new BranchesRowChangeEvent(((BranchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BranchesRowChanging != null)) {
                    this.BranchesRowChanging(this, new BranchesRowChangeEvent(((BranchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BranchesRowDeleted != null)) {
                    this.BranchesRowDeleted(this, new BranchesRowChangeEvent(((BranchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BranchesRowDeleting != null)) {
                    this.BranchesRowDeleting(this, new BranchesRowChangeEvent(((BranchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBranchesRow(BranchesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                rptFCR ds = new rptFCR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BranchesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MainDistributorRow : System.Data.DataRow {
            
            private MainDistributorDataTable tableMainDistributor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MainDistributorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMainDistributor = ((MainDistributorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerritoryManager {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.TerritoryManagerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TerritoryManager\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.TerritoryManagerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegionalManager {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.RegionalManagerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegionalManager\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.RegionalManagerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Node {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.NodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Node\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.NodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAP {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.SAPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SAP\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.SAPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorName {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.DistributorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DistributorName\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.DistributorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillingAddress {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.BillingAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BillingAddress\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.BillingAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingAddress {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.ShippingAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShippingAddress\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.ShippingAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telephone {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.TelephoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Telephone\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.TelephoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telefax {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.TelefaxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Telefax\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.TelefaxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactNames {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.ContactNamesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContactNames\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.ContactNamesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactTitles {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.ContactTitlesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContactTitles\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.ContactTitlesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractNumber {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.ContractNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractNumber\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.ContractNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Categories {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.CategoriesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Categories\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.CategoriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Territory {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.TerritoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Territory\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.TerritoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractDate {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.ContractDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractDate\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.ContractDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedDate {
                get {
                    try {
                        return ((string)(this[this.tableMainDistributor.ModifiedDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ModifiedDate\' in table \'MainDistributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMainDistributor.ModifiedDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerritoryManagerNull() {
                return this.IsNull(this.tableMainDistributor.TerritoryManagerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerritoryManagerNull() {
                this[this.tableMainDistributor.TerritoryManagerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionalManagerNull() {
                return this.IsNull(this.tableMainDistributor.RegionalManagerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionalManagerNull() {
                this[this.tableMainDistributor.RegionalManagerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNull() {
                return this.IsNull(this.tableMainDistributor.NodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNull() {
                this[this.tableMainDistributor.NodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAPNull() {
                return this.IsNull(this.tableMainDistributor.SAPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAPNull() {
                this[this.tableMainDistributor.SAPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorNameNull() {
                return this.IsNull(this.tableMainDistributor.DistributorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorNameNull() {
                this[this.tableMainDistributor.DistributorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillingAddressNull() {
                return this.IsNull(this.tableMainDistributor.BillingAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillingAddressNull() {
                this[this.tableMainDistributor.BillingAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingAddressNull() {
                return this.IsNull(this.tableMainDistributor.ShippingAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingAddressNull() {
                this[this.tableMainDistributor.ShippingAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneNull() {
                return this.IsNull(this.tableMainDistributor.TelephoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneNull() {
                this[this.tableMainDistributor.TelephoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelefaxNull() {
                return this.IsNull(this.tableMainDistributor.TelefaxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelefaxNull() {
                this[this.tableMainDistributor.TelefaxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNamesNull() {
                return this.IsNull(this.tableMainDistributor.ContactNamesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNamesNull() {
                this[this.tableMainDistributor.ContactNamesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactTitlesNull() {
                return this.IsNull(this.tableMainDistributor.ContactTitlesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactTitlesNull() {
                this[this.tableMainDistributor.ContactTitlesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractNumberNull() {
                return this.IsNull(this.tableMainDistributor.ContractNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractNumberNull() {
                this[this.tableMainDistributor.ContractNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoriesNull() {
                return this.IsNull(this.tableMainDistributor.CategoriesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoriesNull() {
                this[this.tableMainDistributor.CategoriesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerritoryNull() {
                return this.IsNull(this.tableMainDistributor.TerritoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerritoryNull() {
                this[this.tableMainDistributor.TerritoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractDateNull() {
                return this.IsNull(this.tableMainDistributor.ContractDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractDateNull() {
                this[this.tableMainDistributor.ContractDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateNull() {
                return this.IsNull(this.tableMainDistributor.ModifiedDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateNull() {
                this[this.tableMainDistributor.ModifiedDateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BranchesRow : System.Data.DataRow {
            
            private BranchesDataTable tableBranches;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BranchesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBranches = ((BranchesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TerritoryManager {
                get {
                    try {
                        return ((string)(this[this.tableBranches.TerritoryManagerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TerritoryManager\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.TerritoryManagerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegionalManager {
                get {
                    try {
                        return ((string)(this[this.tableBranches.RegionalManagerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegionalManager\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.RegionalManagerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Node {
                get {
                    try {
                        return ((string)(this[this.tableBranches.NodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Node\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.NodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAP {
                get {
                    try {
                        return ((string)(this[this.tableBranches.SAPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SAP\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.SAPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributorName {
                get {
                    try {
                        return ((string)(this[this.tableBranches.DistributorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DistributorName\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.DistributorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillingAddress {
                get {
                    try {
                        return ((string)(this[this.tableBranches.BillingAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BillingAddress\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.BillingAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingAddress {
                get {
                    try {
                        return ((string)(this[this.tableBranches.ShippingAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShippingAddress\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.ShippingAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telephone {
                get {
                    try {
                        return ((string)(this[this.tableBranches.TelephoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Telephone\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.TelephoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telefax {
                get {
                    try {
                        return ((string)(this[this.tableBranches.TelefaxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Telefax\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.TelefaxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactNames {
                get {
                    try {
                        return ((string)(this[this.tableBranches.ContactNamesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContactNames\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.ContactNamesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactTitles {
                get {
                    try {
                        return ((string)(this[this.tableBranches.ContactTitlesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContactTitles\' in table \'Branches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranches.ContactTitlesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerritoryManagerNull() {
                return this.IsNull(this.tableBranches.TerritoryManagerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerritoryManagerNull() {
                this[this.tableBranches.TerritoryManagerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionalManagerNull() {
                return this.IsNull(this.tableBranches.RegionalManagerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionalManagerNull() {
                this[this.tableBranches.RegionalManagerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNull() {
                return this.IsNull(this.tableBranches.NodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNull() {
                this[this.tableBranches.NodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAPNull() {
                return this.IsNull(this.tableBranches.SAPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAPNull() {
                this[this.tableBranches.SAPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorNameNull() {
                return this.IsNull(this.tableBranches.DistributorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorNameNull() {
                this[this.tableBranches.DistributorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillingAddressNull() {
                return this.IsNull(this.tableBranches.BillingAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillingAddressNull() {
                this[this.tableBranches.BillingAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingAddressNull() {
                return this.IsNull(this.tableBranches.ShippingAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingAddressNull() {
                this[this.tableBranches.ShippingAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneNull() {
                return this.IsNull(this.tableBranches.TelephoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneNull() {
                this[this.tableBranches.TelephoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelefaxNull() {
                return this.IsNull(this.tableBranches.TelefaxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelefaxNull() {
                this[this.tableBranches.TelefaxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNamesNull() {
                return this.IsNull(this.tableBranches.ContactNamesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNamesNull() {
                this[this.tableBranches.ContactNamesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactTitlesNull() {
                return this.IsNull(this.tableBranches.ContactTitlesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactTitlesNull() {
                this[this.tableBranches.ContactTitlesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MainDistributorRowChangeEvent : System.EventArgs {
            
            private MainDistributorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MainDistributorRowChangeEvent(MainDistributorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MainDistributorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BranchesRowChangeEvent : System.EventArgs {
            
            private BranchesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchesRowChangeEvent(BranchesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591